name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      aws-assume-role-arn:
        type: string
        required: true
      aws-region:
        type: string
        required: true
      aws-statefile-s3-bucket:
        type: string
        required: true
      aws-lock-dynamodb-table:
        type: string
        required: true
      database_name:
        type: string
        required: true
      database_password:
        type: string
        required: true
      database_username:
        type: string
        required: true
      database_instance_name:
        type: string
        required: true
      redis_cluster_id:
        type: string
        required: true
      redis_cluster_name:
        type: string
        required: true


jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-assume-role-arn }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      - name: Read destroy configuration
        id: read-destroy-config
        run: |
          DESTROY="$(jq -r '.${{ inputs.environment }}' ./infra/destroy_config.json)"
          echo "destroy=$(echo $DESTROY)" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: |
          cd infra && terraform init \
            -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ inputs.aws-region }}" \
            -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Destroy
        if: steps.read-destroy-config.outputs.destroy == 'true'
        id: terraform-destroy
        run: cd infra &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform destroy -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -lock=false -auto-approve

      - name: Terraform Plan
        if: steps.read-destroy-config.outputs.destroy != 'true'
        id: terraform-plan
        run: cd infra && terraform workspace select dev || terraform workspace new dev && \
          terraform plan \
          -var-file="./envs/dev/terraform.tfvars" \
          -var="database_name=postgres" \
          -var="database_password=postgres" \
          -var="database_username=postgres" \
          -var="database_instance_name=dev-votesession-database" \
          -var="redis_cluster_id=dev-votesession-cache" \
          -var="redis_cluster_name=dev-votesession-cache" \
          -out="dev.plan"

      - name: Terraform Apply Database and Cache
        if: steps.read-destroy-config.outputs.destroy != 'true'
        id: terraform-apply-database-and-cache
        run: cd infra && \
          terraform workspace select dev || terraform workspace new dev && \
          terraform apply "${{ inputs.environment }}.plan" \
          -lock=false \
          -var="database_name=postgres" \
          -var="database_password=postgres" \
          -var="database_username=postgres" \
          -var="database_instance_name=dev-votesession-database" \
          -var="redis_cluster_id=dev-votesession-cache" \
          -var="redis_cluster_name=dev-votesession-cache"


      - name: Get DB Endpoint
        id: database-endpoint
        run: echo "DB_ENDPOINT=$(terraform output -raw db_endpoint)" >> $GITHUB_ENV

      - name: Get Redis Endpoint
        id: redis-endpoint
        run: echo "REDIS_ENDPOINT=$(terraform output -raw redis_endpoint)" >> $GITHUB_ENV

      - name: Use DB and Redis endpoints
        run: |
          echo "Database Endpoint: $DB_ENDPOINT"
          echo "Redis Endpoint: $REDIS_ENDPOINT"