name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      is-to-destroy:
        type: string
        required: true
      environment:
        type: string
        required: true
      aws-assume-role-arn:
        type: string
        required: true
      aws-region:
        type: string
        required: true
      aws-statefile-s3-bucket:
        type: string
        required: true
      aws-lock-dynamodb-table:
        type: string
        required: true
      database_name:
        type: string
        required: true
      database_password:
        type: string
        required: true
      database_username:
        type: string
        required: true
      database_instance_name:
        type: string
        required: true
      redis_cluster_id:
        type: string
        required: true
      redis_cluster_name:
        type: string
        required: true
      deployer_key_name:
        type: string
        required: true
      server_instance_name:
        type: string
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Verify Terraform Version
        run: terraform --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-assume-role-arn }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      - name: Terraform Init
        run: |
          cd infra && terraform init \
            -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ inputs.aws-region }}" \
            -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"

      - name: Terraform Validate
        run: cd infra && terraform validate

      - name: Terraform Destroy
        if: inputs.is-to-destroy == 'true'        
        id: terraform-destroy
        run: cd infra && terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} && timeout 300s terraform destroy -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -var="database_name=${{ inputs.database_name }}" -var="database_password=${{ inputs.database_password }}" -var="database_username=${{ inputs.database_username }}" -var="database_instance_name=${{ inputs.database_instance_name }}" -var="redis_cluster_id=${{ inputs.redis_cluster_id }}" -var="redis_cluster_name=${{ inputs.redis_cluster_name }}" -var="deployer_key_name=${{ inputs.deployer_key_name }}" -var="server_instance_name=${{ inputs.server_instance_name }}" -auto-approve

      - name: Terraform Plan
        if: inputs.is-to-destroy == 'false'        
        id: terraform-plan
        run: cd infra && terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} && timeout 300s terraform plan -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -var="database_name=${{ inputs.database_name }}" -var="database_password=${{ inputs.database_password }}" -var="database_username=${{ inputs.database_username }}" -var="database_instance_name=${{ inputs.database_instance_name }}" -var="redis_cluster_id=${{ inputs.redis_cluster_id }}" -var="redis_cluster_name=${{ inputs.redis_cluster_name }}" -var="deployer_key_name=${{ inputs.deployer_key_name }}" -var="server_instance_name=${{ inputs.server_instance_name }}" -out="${{ inputs.environment }}.plan"

      - name: Terraform Apply
        if: inputs.is-to-destroy == 'false'        
        id: terraform-apply
        run: cd infra &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform apply "${{ inputs.environment }}.plan"

      - name: Capture Outputs
        id: capture-outputs
        run: |
          cd infra
          terraform output -json > "${{ inputs.environment }}_terraform_outputs.json"
          echo "Terraform outputs captured."

      - name: Upload Outputs as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.environment }}-terraform-outputs" 
          path: "infra/${{ inputs.environment }}_terraform_outputs.json"